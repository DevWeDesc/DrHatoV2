generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../ERD.png"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  username String
  password String
  crmv     Int?
  userType String[]
  schedule Schedule[]
}

model Transaction {
  id             Int      @id @default(autoincrement())
  title          String
  amount         Int
  type           String
  category       String
  createdAt      String
  transaction_id Int
  customer       Customer @relation(fields: [transaction_id], references: [id])
}

model Customer {
  id            Int           @id @unique @default(autoincrement())
  name          String        @unique
  adress        String
  phone         String        @unique
  cpf           String        @unique
  email         String
  birthday      String
  balance       Int?
  cep           String
  vetPreference String?
  pets          Pets[]
  transaction   Transaction[]
}

model Pets {
  id              Int             @id @default(autoincrement())
  name            String
  especie         String
  sexo            String
  race            String
  weigth          String
  status          String
  corPet          String
  sizePet         String
  bornDate        String
  observations    String
  customer_id     Int
  codPet          String          @unique @default(uuid())
  rga             Int             @unique
  medicineRecords MedicineRecord?
  customer        Customer        @relation(fields: [customer_id], references: [id])
  queue           Queues?
}

model Schedule {
  id        Int      @id @default(autoincrement())
  plants    String[]
  plantId   Int
  plantsOur String[]
  users     User     @relation(fields: [plantId], references: [id])
}

model Autorizations {
  id   Int    @id @default(autoincrement())
  name String
  text String
}

model MedicineRecord {
  id           Int   @id @default(autoincrement())
  observations String[] @default([""])
  petId        Int      @unique
  pet          Pets     @relation(fields: [petId], references: [id])
  petExams     ExamsForPet[]
}

model Exams {
  id               Int             @id @default(autoincrement())
  name             String
  price            Decimal
  available        Boolean? @default(false)
  doneExame        Boolean? @default(false)
  subName          String?
  description      String?
  examsType        String[]
  ageRange         String[]
  applicableGender String[]
  Sectors          Sectors[]
}

model ExamsForPet {
  id               Int             @id @default(autoincrement())
  name             String
  price            Decimal
  requesteData String?
  requestedFor String?
  responsibleForExam String?
  doneExame        Boolean? @default(false)
  medicine_id Int
  medicine MedicineRecord @relation(fields: [medicine_id], references: [id])
  examsType        String[] @default(["lab"])
}

model Sectors {
  id        Int          @id @default(autoincrement())
  name      String
  examId    Int?
  proced_id Int?
  sectorsId Int?
  proceds   Procedures[]
  Exams     Exams?       @relation(fields: [examId], references: [id])
}

model Instructions {
  id          Int    @id @default(autoincrement())
  name        String
  description String
}

model Procedures {
  id                  Int      @id @default(autoincrement())
  name                String   @unique
  price               Int
  applicationInterval String?
  applicableGender    String[]
  ageRange            String[]
  available           Boolean
  observations        String
  group_id            Int
  sector_id           Int
  groups              Groups   @relation(fields: [group_id], references: [id])
  sector              Sectors  @relation(fields: [sector_id], references: [id])
}

model Groups {
  id      Int          @id @default(autoincrement())
  name    String
  proceds Procedures[]
}

model Queues {
  id           Int      @id @default(autoincrement())
  pet_id       Int      @unique
  queryType    String?
  returnQueue  Boolean? @default(false)
  serviceQueue Boolean? @default(false)
  queueEntry   String?
  pets         Pets     @relation(fields: [pet_id], references: [id])
}

