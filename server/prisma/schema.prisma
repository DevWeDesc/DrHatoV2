generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../ERD.svg"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRoles {
  MASTER
  ADMIN
  MANAGER
  VETERINARIAN
  LABORATORY
  RECEPTIONIST
  UNDEFINED
}

model User {
  id          Int        @id @default(autoincrement())
  email       String?    @unique
  username    String?    @unique
  consultName String?
  name        String?
  password    String
  role        UserRoles?
  crmv        String?
  userIsVet   Boolean?   @default(false)
  userType    String[]
}

model Customer {
  id              Int              @id @unique @default(autoincrement())
  CodCli          Int?             @unique
  name            String
  adress          String
  district        String?
  cep             String?
  neighbour       String?
  state           String?
  phone           String
  tell            String?
  cpf             String           @unique
  rg              String?
  email           String?
  birthday        String
  balance         Float?
  kindPerson      String?
  vetPreference   String?
  howKnowUs       String?
  pets            Pets[]
  transaction     Transaction[]
  customerAccount CustomerAccount?
}

model Pets {
  id                 Int                    @id @default(autoincrement())
  CodCli             Int?
  CodAnimal          Int?                   @unique
  name               String
  especie            String
  sexo               String
  race               String
  weigth             Float?
  haveChip           Boolean?
  corPet             String?
  sizePet            String?                @default("")
  bornDate           String
  dateAge            String?
  observations       String?
  customer_id        Int
  codPet             String                 @unique @default(uuid())
  isCastred          Boolean?
  debits             Decimal?
  priceAccumulator   PricesAccumulator?
  medicineRecords    MedicineRecord?
  customer           Customer               @relation(fields: [customer_id], references: [id])
  queue              Queues?
  bed                Bed?
  petOldConsults     OldConsults[]
  petOldExamsHistory OldExamsHistory[]
  petOldAdmission    OldAdmissionsHistory[]
  ResultsOld         ResultsOld[]
}

model OldExamsHistory {
  id              Int       @id @default(autoincrement())
  name            String?
  vetId           Int?
  codConsult      Int?
  codExam         Int?
  codAnimal       Int?
  codCli          Int?
  CodExamConsulta Int?
  madeAt          DateTime?
  vetName         String?
  obsOne          String
  obsTwo          String
  metodology      String?
  image           Boolean?
  laboratory      Boolean?
  Pets            Pets?     @relation(fields: [petsId], references: [CodAnimal])
  petsId          Int?
}

model OldConsults {
  id           Int       @id @default(autoincrement())
  codConsulta  Int?
  date         DateTime?
  startAt      String?
  endAt        String?
  vetId        Int?
  vetName      String?
  petWeight    Float?
  petName      String?
  customerName String?
  consulType   String?
  symptoms     String?
  request      String?
  diagnostic   String?
  CodAnimal    Int
  CodCli       Int
  Pets         Pets?     @relation(fields: [petsId], references: [CodAnimal])
  petsId       Int?
}

model Autorizations {
  id   Int    @id @default(autoincrement())
  name String
  text String
}

model MedicineRecord {
  id           Int      @id @default(autoincrement())
  observations String[] @default([""])
  petId        Int      @unique
  pet          Pets     @relation(fields: [petId], references: [id])

  petExams      ExamsForPet[]
  petVaccines   VaccinesForPet[]
  petSurgeries  SurgeriesForPet[]
  petProcedures ProceduresForPet[]
  petBeds       BedsForPet[]
  petQueues     QueuesForPet[]
  petMedicines  MedicinesForPets[]
  petConsults   OpenedConsultsForPet[]
  petAdmissions OpenededAdmissionsForPet[]
}

model Sectors {
  id        Int          @id @default(autoincrement())
  sectorId  Int?         @unique
  name      String
  examId    Int?
  proced_id Int?
  sectorsId Int?
  proceds   Procedures[]
}

model Instructions {
  id          Int    @id @default(autoincrement())
  name        String
  description String
}

model Procedures {
  id                  Int              @id @default(autoincrement())
  codProcedimento     Int?             @unique
  name                String
  price               Decimal?
  priceTwo            Decimal?
  priceThree          Decimal?
  priceFour           Decimal?
  categoryOld         String?
  minAge              Int?
  maxAge              Int?
  applicableMale      Boolean?
  applicableFemale    Boolean?
  appicableEspecies   Especies[]
  applicationInterval String?
  categoryProcedure   Int?
  available           Boolean
  observations        String
  group_id            Int?
  sector_id           Int?
  groups              Groups?          @relation(fields: [group_id], references: [id])
  sector              Sectors?         @relation(fields: [sector_id], references: [id])
  HealthInsurance     HealthInsurance? @relation(fields: [healthInsuranceId], references: [id])
  healthInsuranceId   Int?
}

model ProceduresForPet {
  id                     Int            @id @default(autoincrement())
  name                   String
  price                  Decimal?
  priceTwo               Decimal?
  priceThree             Decimal?
  priceFour              Decimal?
  categoryOld            String?
  minAge                 Int?
  maxAge                 Int?
  applicationInterval    String?
  available              Boolean
  observations           String?
  group_id               Int?
  sector_id              Int?
  requestedDate          DateTime?
  finishedDate           DateTime       @updatedAt
  isDone                 Boolean?       @default(false)
  medicine_id            Int
  linkedConsultDebitId   Int?           @unique
  LinkedAdmissionDebitId Int?           @unique
  medicine               MedicineRecord @relation(fields: [medicine_id], references: [id])
}

model Groups {
  id       Int          @id @default(autoincrement())
  codGroup Int?
  name     String
  proceds  Procedures[]
}

//  ------------- QUEUES -------------   //

model Queues {
  id            Int       @id @default(autoincrement())
  pet_id        Int       @unique
  queryType     String?
  vetPreference String?
  queueEntry    DateTime?
  queueExit     DateTime?
  openConsultId String?
  queueOur      String?
  moreInfos     String?
  petIsInQueue  Boolean?  @default(false)
  pets          Pets      @relation(fields: [pet_id], references: [id])
}

model QueuesForPet {
  id                      Int            @id @default(autoincrement())
  queueEntry              DateTime?
  queueExit               DateTime?
  queueIsDone             Boolean?       @default(false)
  queryType               String?
  debitOnThisQuery        Decimal?
  responsibleVeterinarian String?
  petName                 String?
  petWeight               String?
  observations            String?
  unconcludeObs           String?
  unconcludeDate          DateTime?      @updatedAt
  medicine_id             Int
  medicine                MedicineRecord @relation(fields: [medicine_id], references: [id])
}

//  ------------- ADMISSIONS -------------   //

model OldAdmissionsHistory {
  id                       Int                     @id @default(autoincrement())
  CodAnimal                Int?
  CodLeito                 Int?
  CodInternacao            Int?                    @unique
  entryDay                 DateTime?
  exitDay                  DateTime?
  exitHour                 String?
  entryHour                String?
  Pets                     Pets?                   @relation(fields: [petsId], references: [id])
  petsId                   Int?
  OldAdmissionProcedures   OldAdmissionProcedures? @relation(fields: [oldAdmissionProceduresId], references: [id])
  oldAdmissionProceduresId Int?
}

model OldAdmissionProcedures {
  id               Int                    @id @default(autoincrement())
  CodAnimal        Int?
  CodInternacao    Int?
  procedureName    String?
  procedureValue   Float?
  admissionHistory OldAdmissionsHistory[]
}

//  ------------- ADMISSIONS -------------   //
model Kennel {
  id          Int      @id @default(autoincrement())
  name        String?
  totalBeds   Int?
  description String?
  price       Decimal?
  beds        Bed[]
}

model Bed {
  id               Int       @id @default(autoincrement())
  kennelId         Int
  kennel           Kennel?   @relation(fields: [kennelId], references: [id])
  petId            Int?      @unique
  pet              Pets?     @relation(fields: [petId], references: [id])
  isBusy           Boolean?  @default(false)
  mustFasting      Boolean?  @default(false)
  entryOur         DateTime?
  exitOur          DateTime?
  dailyRate        Int?
  hospitalizedDays Int?
  totalDebt        Decimal?
}

model BedsForPet {
  id                Int                    @id @default(autoincrement())
  openedAdmissionId String?                @unique
  entryOur          DateTime?
  exitOur           DateTime?
  mustFasting       Boolean?               @default(false)
  totalDebt         Decimal?
  isCompleted       Boolean?               @default(false)
  hospDiary         HospitalizationDiary[]
  medicine_id       Int
  medicine          MedicineRecord         @relation(fields: [medicine_id], references: [id])
}

model HospitalizationDiary {
  id              Int         @id @default(autoincrement())
  observations    String
  observationDate DateTime    @default(now())
  BedsForPet      BedsForPet? @relation(fields: [bedsForPetId], references: [id])
  bedsForPetId    Int?
}

//  ------------- ADMISSIONS -------------   //

//  ------------- VACINES -------------   //

model Vaccines {
  id                Int              @id @default(autoincrement())
  name              String
  price             Decimal
  description       String
  disponible        Boolean?
  applicableMale    Boolean?
  applicableFemale  Boolean?
  sector_id         Int?
  HealthInsurance   HealthInsurance? @relation(fields: [healthInsuranceId], references: [id])
  healthInsuranceId Int?
}

model VaccinesForPet {
  id                     Int            @id @default(autoincrement())
  name                   String
  price                  Decimal
  description            String
  requestedDate          DateTime
  applicationDate        DateTime?
  isDone                 Boolean?       @default(false)
  medicine_id            Int
  medicine               MedicineRecord @relation(fields: [medicine_id], references: [id])
  linkedConsultDebitId   Int?           @unique
  LinkedAdmissionDebitId Int?           @unique
}

//  ------------- VACINES -------------  //

// -------------- SURGERIES ----------------- //
model Surgeries {
  id                 Int              @id @default(autoincrement())
  name               String
  price              Decimal
  applicableToMale   Boolean?
  applicableToFemale Boolean?
  sector_id          Int?
  HealthInsurance    HealthInsurance? @relation(fields: [healthInsuranceId], references: [id])
  healthInsuranceId  Int?
}

model SurgeriesCentral {
  id                  Int             @id @default(autoincrement())
  centralName         String
  isOpen              Boolean
  openHours           String
  closedHours         String
  maxSlots            Int
  movimentedValues    Float?
  surgeriesCompleteds Int?
  surgerieSlots       SurgerieSlots[]
}

model SurgerieSlots {
  id                 Int               @id @default(autoincrement())
  petName            String?
  petId              Int?
  surgerieName       String?
  vetName            String?
  vetCrmv            String?
  SurgeriesCentral   SurgeriesCentral? @relation(fields: [surgeriesCentralId], references: [id])
  surgeriesCentralId Int?
}

enum SurgerieStatus {
  FINISHED
  STARTED
  INPROGRESS
}

model SurgeriesForPet {
  id                     Int               @id @default(autoincrement())
  name                   String
  price                  Decimal
  requestedDate          DateTime          @default(now())
  completedDate          DateTime?
  status                 SurgerieStatus?   @default(STARTED)
  surgeriesReport        SurgeriesReports?
  medicine_id            Int
  medicine               MedicineRecord    @relation(fields: [medicine_id], references: [id])
  linkedConsultDebitId   Int?              @unique
  LinkedAdmissionDebitId Int?              @unique
  slotId                 Int?
}

model OpenedConsultsForPet {
  id                  String              @id @default(uuid())
  openedDate          DateTime            @default(now())
  petName             String?
  openedBy            String?
  vetPreference       String?
  closedDate          DateTime?
  updatedDate         DateTime?
  isClosed            Boolean?
  closedByVetId       Int?
  clodedByVetName     String?
  petWeight           String?
  observations        String?
  consultType         String?
  symptoms            String?
  request             String?
  diagnostic          String?
  totaLDebits         Decimal?
  healthInsuranceId   Int?
  healthInsuranceName String?
  consultDebits       PetConsultsDebits[]
  MedicineRecord      MedicineRecord?     @relation(fields: [medicineRecordId], references: [id])
  medicineRecordId    Int?
  clientIsVip         Boolean?            @default(false)
  customerAccountId   Int?                @unique
  customerAccount     CustomerAccount?    @relation(fields: [customerAccountId], references: [id])
  InstallmentsDebts   InstallmentsDebts?
}

model OpenededAdmissionsForPet {
  id                  String              @id @default(uuid())
  openedDate          DateTime            @default(now())
  closedDate          DateTime?
  updatedDate         DateTime?
  petName             String?
  isClosed            Boolean?
  closedByVetId       Int?
  clodedByVetName     String?
  petWeight           String?
  observations        String?
  consultType         String?
  totaLDebits         Decimal?
  healthInsuranceId   Int?
  healthInsuranceName String?
  consultDebits       PetConsultsDebits[]
  medicineRecordId    Int?
  MedicineRecord      MedicineRecord?     @relation(fields: [medicineRecordId], references: [id])
  customerAccountId   Int?                @unique
  customerAccount     CustomerAccount?    @relation(fields: [customerAccountId], references: [id])
  InstallmentsDebts   InstallmentsDebts?
}

model SurgeriesReports {
  id                Int             @id @default(autoincrement())
  reportedAt        DateTime        @default(now())
  reportedText      String
  reportedBy        String
  surgeriesForPetId Int             @unique
  SurgeriesForPet   SurgeriesForPet @relation(fields: [surgeriesForPetId], references: [id])
}

// -------------- SURGERIES ----------------- //

// -------------- FINANCES ----------------- //
model PetConsultsDebits {
  id                       Int                       @id @default(autoincrement())
  name                     String?
  price                    Decimal?
  sectorId                 Int?
  itemId                   Int?
  isAdmissions             Boolean?
  isExam                   Boolean?
  isSurgerie               Boolean?
  isVaccine                Boolean?
  isProcedure              Boolean?
  isAdmission              Boolean?
  RequestedByVetId         Int?
  RequestedByVetName       String?
  requestedDate            DateTime                  @default(now())
  consultOpenedId          String?                   @unique
  surgerieOpenedId         String?                   @unique
  OpenedAdmissionsForPet   OpenededAdmissionsForPet? @relation(fields: [openedAdmissionsForPetId], references: [id])
  OpenedConsultsForPet     OpenedConsultsForPet?     @relation(fields: [openedConsultsForPetId], references: [id])
  openedConsultsForPetId   String?
  openedAdmissionsForPetId String?
}

model PricesAccumulator {
  id          Int      @id @default(autoincrement())
  petId       Int      @unique
  pets        Pets     @relation(fields: [petId], references: [id])
  accumulator Decimal?
}

model HospVetBox {
  id               Int                @id @default(autoincrement())
  name             String
  movimentedValues Decimal?
  entryValues      Decimal?
  exitValues       Decimal?
  boxIsOpen        Boolean?           @default(false)
  historyBox       HospBoxHistory[]
  returnsClientBox ReturnsClientBox[]
}

model ReturnsClientBox {
  id              Int                @id @unique @default(autoincrement())
  idHospVetBox    Int?
  hospVetBox      HospVetBox?        @relation(fields: [idHospVetBox], references: [id])
  idCustomer      Int?
  customerAccount CustomerAccount?   @relation(fields: [idCustomer], references: [id])
  idInstallment   Int?               @unique
  installment     InstallmentsDebts? @relation(fields: [idInstallment], references: [id])
  reasonForReturn String
  value           String
  date            DateTime           @default(now())
}

model HospBoxHistory {
  id           Int                 @id @default(autoincrement())
  entryValues  Decimal?
  exitValues   Decimal?
  totalValues  Decimal?
  openBox      DateTime?
  closeBox     DateTime?
  openBy       String?
  closedBy     String?
  boxIsOpen    Boolean?            @default(false)
  hospVetBoxId Int?
  HospVetBox   HospVetBox?         @relation(fields: [hospVetBoxId], references: [id])
  installments InstallmentsDebts[]
}

model CustomerAccount {
  id               Int                       @id @default(autoincrement())
  accountNumber    Int?
  debits           Decimal?
  credits          Decimal?
  customerId       Int                       @unique
  customer         Customer                  @relation(fields: [customerId], references: [id])
  installments     InstallmentsDebts[]
  returnsClientBox ReturnsClientBox[]
  clientIsVip      Boolean?                  @default(false)
  consultId        String?
  consultsForPet   OpenedConsultsForPet?
  admissionId      String?
  Admission        OpenededAdmissionsForPet?
}

model InstallmentsDebts {
  id                 Int                       @id @default(autoincrement())
  debitName          String?
  totalDebit         Decimal?
  paymentType        String?
  paymentDate        DateTime?
  installmentAmount  Int?
  amountInstallments Decimal?
  customerId         Int?
  customerAccount    CustomerAccount?          @relation(fields: [customerId], references: [id])
  boxHistoryId       Int
  boxHistory         HospBoxHistory            @relation(fields: [boxHistoryId], references: [id])
  returnClient       ReturnsClientBox?
  consultPetId       String?                   @unique
  consult            OpenedConsultsForPet?     @relation(fields: [consultPetId], references: [id])
  admissionsPetId    String?                   @unique
  admission          OpenededAdmissionsForPet? @relation(fields: [admissionsPetId], references: [id])
}

model Transaction {
  id             Int      @id @default(autoincrement())
  title          String
  amount         Int
  type           String
  category       String
  createdAt      String
  transaction_id Int
  customer       Customer @relation(fields: [transaction_id], references: [id])
}

// -------------- FINANCES ----------------- //

// -------------- EXAMES ----------------- //

model ExamsForPet {
  id                     Int              @id @default(autoincrement())
  codeExam               Int?              
  name                   String
  price                  Decimal
  defaultMethodology     String?
  impressName            String?
  requesteData           DateTime?
  requestedFor           String?
  requestedCrm           String?
  responsibleForExam     String?
  responsibleForCrm      String?
  doneExame              Boolean?         @default(false)
  onePart                Boolean?
  twoPart                Boolean?
  byReport               Boolean?
  externalReport         Boolean?
  medicine_id            Int
  linkedConsultDebitId   Int?             @unique
  LinkedAdmissionDebitId Int?             @unique
  reportExams            ReportForExams[]
  medicine               MedicineRecord   @relation(fields: [medicine_id], references: [id])
  examsType              String[]         @default(["lab"])
  updatedAt              DateTime         @updatedAt
}

model ReportForExams {
  id                Int         @id @default(autoincrement())
  report            Json?
  textReport        String?
  externalReportIds String[]
  externalReport    Boolean?
  onePart           Boolean?
  twoPart           Boolean?
  byReport          Boolean?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  examsId           Int
  examsForPet       ExamsForPet @relation(fields: [examsId], references: [id])
}

// -------------- EXAMES ----------------- //

// -------------- Especies/Raças ----------------- //
model Especies {
  id              Int          @id @default(autoincrement())
  name            String       @unique
  race            Races[]
  Procedures      Procedures[]
  proceduresId    Int?
  OldExams        OldExams[]
  oldExamsCodexam Int?
}

model Races {
  id         Int       @id @default(autoincrement())
  name       String
  codEspOld  Int?
  Especies   Especies? @relation(fields: [especiesId], references: [id])
  especiesId Int?
}

// -------------- Especies/Raças End ----------------- //

// -------------- Medicines ----------------- //
enum MedicationUnit {
  CPR
  CPZ
  ML
  MG
  G
  GT
  CT
  CS
  UN
}

model MedicinesGroups {
  id        Int        @id @default(autoincrement())
  title     String
  medicines Medicine[]
}

model Medicine {
  id                Int              @id @default(autoincrement())
  title             String
  price             Decimal?
  unitMeasurement   MedicationUnit?
  dosage            String
  observations      String?
  stock             Int?
  MedicinesGroups   MedicinesGroups? @relation(fields: [medicinesGroupsId], references: [id])
  medicinesGroupsId Int?
}

model MedicinesForPets {
  id                Int             @id @default(autoincrement())
  title             String
  dosageApplication String
  unitMeasurement   MedicationUnit?
  isPaid            Boolean?
  applicationDate   DateTime        @default(now())
  MedicineRecord    MedicineRecord? @relation(fields: [medicineRecordId], references: [id])
  medicineRecordId  Int?
}

// -------------- Medicines ----------------- //

model HealthInsurance {
  id                    Int          @id @default(autoincrement())
  planName              String?
  disponible            Boolean
  planProvider          String
  graceDays             Int?
  coverageLimit         Float?
  admissionDeduction    Int?
  disponibleAtAdmission Boolean?
  exams                 OldExams[]
  vaccines              Vaccines[]
  surgeries             Surgeries[]
  procedures            Procedures[]
}

// -------------- Exames Old Version ----------------- //
model OldExams {
  codexam           Int              @id @default(autoincrement())
  name              String
  price             Float
  onePart           Boolean?
  twoPart           Boolean?
  byReport          Boolean?
  ageGroups         Int?             @default(3)
  disponible        Boolean?
  minAge            Int?             @default(0)
  maxAge            Int?             @default(9999)
  applicableMales   Boolean?
  appicableFemales  Boolean?
  defaultMetodology String?
  uniqueCod         String?
  sector            Int?
  ImageLab          Boolean?
  defaultLab        Boolean?
  healthPlan        Boolean?
  impressName       String?
  partExams         PartExams[]
  appicableEspecies Especies[]
  HealthInsurance   HealthInsurance? @relation(fields: [healthInsuranceId], references: [id])
  healthInsuranceId Int?
}

model PartExams {
  id              Int           @id @default(autoincrement())
  codpart         Int?          @unique @default(autoincrement())
  OldExams        OldExams?     @relation(fields: [oldExamsCodexam], references: [codexam])
  oldExamsCodexam Int?
  examsDetails    PartDetails[]
  partName        String
  isFirst         Boolean
}

model PartDetails {
  id               Int        @id @default(autoincrement())
  codDetalhe       Int?       @unique
  PartExams        PartExams? @relation(fields: [partExamsCodpart], references: [codpart])
  partExamsCodpart Int?
  caracteristic    String?
  relativeUnit     String?
  absoluteUnit     String?
  agesOne          String?
  minAgesOne       String?
  maxAgesOne       String?
  agesTwo          String?
  minAgesTwo       String?
  maxAgesTwo       String?
  agesThree        String?
  minAgesThree     String?
  maxAgesThree     String?
  parts            Int?
}

model ResultsOld {
  id            Int      @id @default(autoincrement())
  customerName  String?
  petId         Int?
  pet           Pets?    @relation(fields: [petId], references: [id])
  date          DateTime
  examId        Int
  examName      String?
  requesterName String
  requesterCRM  String
  report        Json?
}

model PaymentsType {
  id          Int    @id @default(autoincrement())
  typePayment String @unique
}
