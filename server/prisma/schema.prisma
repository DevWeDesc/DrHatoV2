generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../ERD.svg"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  username  String?
  password  String
  crmv      Int?
  userIsVet Boolean?   @default(false)
  userType  String[]
  schedule  Schedule[]
}

model Transaction {
  id             Int      @id @default(autoincrement())
  title          String
  amount         Int
  type           String
  category       String
  createdAt      String
  transaction_id Int
  customer       Customer @relation(fields: [transaction_id], references: [id])
}

model Customer {
  id              Int              @id @unique @default(autoincrement())
  name            String
  adress          String
  district        String?
  cep             String?
  neighbour       String?
  state           String?
  phone           String           @unique
  tell            String?
  cpf             String           @unique
  rg              String?
  email           String?
  birthday        String
  balance         Int?
  kindPerson      String?
  vetPreference   String?
  howKnowUs       String?
  pets            Pets[]
  transaction     Transaction[]
  customerAccount CustomerAccount?
}

model Pets {
  id               Int                @id @default(autoincrement())
  name             String
  especie          String
  sexo             String
  race             String
  weigth           String?
  haveChip         Boolean?
  corPet           String?
  sizePet          String?            @default("")
  bornDate         String
  observations     String?
  customer_id      Int
  codPet           String             @unique @default(uuid())
  isCastred        Boolean?
  debits           Decimal?
  priceAccumulator PricesAccumulator?
  medicineRecords  MedicineRecord?
  customer         Customer           @relation(fields: [customer_id], references: [id])
  queue            Queues?
  bed              Bed?
}

model PricesAccumulator {
  id          Int      @id @default(autoincrement())
  petId       Int      @unique
  pets        Pets     @relation(fields: [petId], references: [id])
  accumulator Decimal?
}

model Schedule {
  id        Int      @id @default(autoincrement())
  plants    String[]
  plantId   Int
  plantsOur String[]
  users     User     @relation(fields: [plantId], references: [id])
}

model Autorizations {
  id   Int    @id @default(autoincrement())
  name String
  text String
}

model MedicineRecord {
  id            Int                @id @default(autoincrement())
  observations  String[]           @default([""])
  petId         Int                @unique
  pet           Pets               @relation(fields: [petId], references: [id])
  petExams      ExamsForPet[]
  petVaccines   VaccinesForPet[]
  petSurgeries  SurgeriesForPet[]
  petProcedures ProceduresForPet[]
  petBeds       BedsForPet[]
  petQueues     QueuesForPet[]
}

model Sectors {
  id        Int          @id @default(autoincrement())
  name      String
  examId    Int?
  proced_id Int?
  sectorsId Int?
  proceds   Procedures[]
  Exams     Exams?       @relation(fields: [examId], references: [id])
}

model Instructions {
  id          Int    @id @default(autoincrement())
  name        String
  description String
}

model Procedures {
  id                  Int      @id @default(autoincrement())
  name                String   @unique
  price               Int
  applicationInterval String?
  applicableGender    String[]
  ageRange            String[]
  available           Boolean
  observations        String
  group_id            Int?
  sector_id           Int?
  groups              Groups?  @relation(fields: [group_id], references: [id])
  sector              Sectors? @relation(fields: [sector_id], references: [id])
}

model ProceduresForPet {
  id                  Int            @id @default(autoincrement())
  name                String
  price               Int
  applicationInterval String?
  applicableGender    String[]
  ageRange            String[]
  available           Boolean
  observations        String
  group_id            Int?
  sector_id           Int?
  requestedDate       DateTime?
  isDone              Boolean?       @default(false)
  medicine_id         Int
  medicine            MedicineRecord @relation(fields: [medicine_id], references: [id])
}

model Groups {
  id      Int          @id @default(autoincrement())
  name    String
  proceds Procedures[]
}

model Queues {
  id            Int       @id @default(autoincrement())
  pet_id        Int       @unique
  queryType     String?
  vetPreference String?
  queueEntry    DateTime?
  queueExit     DateTime?
  queueOur      String?
  moreInfos     String?
  petIsInQueue  Boolean?  @default(false)
  pets          Pets      @relation(fields: [pet_id], references: [id])
}

model QueuesForPet {
  id                      Int            @id @default(autoincrement())
  queueEntry              DateTime?
  queueExit               DateTime?
  queueIsDone             Boolean?       @default(false)
  queryType               String?
  debitOnThisQuery        Decimal?
  responsibleVeterinarian String?
  petName                 String?
  petWeight               String?
  observations            String?
  medicine_id             Int
  medicine                MedicineRecord @relation(fields: [medicine_id], references: [id])
}

model Kennel {
  id          Int      @id @default(autoincrement())
  name        String?
  totalBeds   Int?
  description String?
  price       Decimal?
  beds        Bed[]
}

model Bed {
  id               Int       @id @default(autoincrement())
  kennelId         Int
  kennel           Kennel?   @relation(fields: [kennelId], references: [id])
  petId            Int?      @unique
  pet              Pets?     @relation(fields: [petId], references: [id])
  isBusy           Boolean?  @default(false)
  mustFasting      Boolean?  @default(false)
  entryOur         DateTime?
  exitOur          DateTime?
  dailyRate        Int?
  hospitalizedDays Int?
  totalDebt        Decimal?
}

model BedsForPet {
  id          Int       @id @default(autoincrement())
  entryOur    DateTime?
  exitOur     DateTime?
  mustFasting Boolean?  @default(false)
  totalDebt   Decimal?
  isCompleted Boolean?  @default(false)

  admissionsObservations Json?
  medicine_id            Int
  medicine               MedicineRecord @relation(fields: [medicine_id], references: [id])
}

model Vaccines {
  id          Int     @id @default(autoincrement())
  name        String
  price       Decimal
  description String
}

model VaccinesForPet {
  id              Int            @id @default(autoincrement())
  name            String
  price           Decimal
  description     String
  requestedDate   DateTime
  applicationDate DateTime?
  isDone          Boolean?       @default(false)
  medicine_id     Int
  medicine        MedicineRecord @relation(fields: [medicine_id], references: [id])
}

model Surgeries {
  id    Int     @id @default(autoincrement())
  name  String
  price Decimal
}

model SurgeriesForPet {
  id            Int            @id @default(autoincrement())
  name          String
  price         Decimal
  scheduledDate DateTime?
  completeDate  DateTime?
  status        String?
  isDone        Boolean?       @default(false)
  medicine_id   Int
  medicine      MedicineRecord @relation(fields: [medicine_id], references: [id])
}

model HospVetBox {
  id               Int              @id @default(autoincrement())
  name             String
  movimentedValues Decimal?
  entryValues      Decimal?
  exitValues       Decimal?
  boxIsOpen        Boolean?         @default(false)
  historyBox       HospBoxHistory[]
}

model HospBoxHistory {
  id           Int                 @id @default(autoincrement())
  entryValues  Decimal?
  exitValues   Decimal?
  totalValues  Decimal?
  openBox      DateTime?
  closeBox     DateTime?
  openBy       String?
  closedBy     String?
  boxIsOpen    Boolean?            @default(false)
  hospVetBoxId Int?
  HospVetBox   HospVetBox?         @relation(fields: [hospVetBoxId], references: [id])
  installments InstallmentsDebts[]
}

model CustomerAccount {
  id            Int                 @id @default(autoincrement())
  accountNumber Int?
  debits        Decimal?
  credits       Decimal?
  customerId    Int                 @unique
  customer      Customer            @relation(fields: [customerId], references: [id])
  installments  InstallmentsDebts[]
}

model InstallmentsDebts {
  id                 Int             @id @default(autoincrement())
  debitName          String?
  totalDebit         Decimal?
  paymentType        String?
  paymentDate        DateTime?
  installmentAmount  Int?
  amountInstallments Decimal?
  customerId         Int
  customerAccount    CustomerAccount @relation(fields: [customerId], references: [id])
  boxHistoryId       Int
  boxHistory         HospBoxHistory  @relation(fields: [boxHistoryId], references: [id])
}

// -------------- EXAMES ----------------- //
model Exams {
  id               Int                   @id @default(autoincrement())
  name             String
  price            Decimal
  available        Boolean?              @default(false)
  doneExame        Boolean?              @default(false)
  subName          String?
  description      String?
  examsType        String[]
  ageRange         String[]
  applicableGender String[]
  isMultiPart      Boolean?              @default(false)
  isReportByText   Boolean?              @default(false)
  isOnePart        Boolean?              @default(false)
  multiparts       Exams[]               @relation("MultiParts")
  Exams            Exams?                @relation("MultiParts", fields: [multipartId], references: [id])
  multipartId      Int?
  Sectors          Sectors[]
  characteristics  ExamCharacteristics[]
}

model ExamsForPet {
  id                 Int              @id @default(autoincrement())
  name               String
  price              Decimal
  requesteData       DateTime?
  requestedFor       String?
  responsibleForExam String?
  doneExame          Boolean?         @default(false)
  isMultiPart        Boolean?         @default(false)
  isReportByText     Boolean?         @default(false)
  isOnePart          Boolean?         @default(false)
  medicine_id        Int
  reportExams        ReportForExams[]
  medicine           MedicineRecord   @relation(fields: [medicine_id], references: [id])
  examsType          String[]         @default(["lab"])
  updatedAt          DateTime         @updatedAt
}

model ExamCharacteristics {
  id      Int     @id @default(autoincrement())
  name    String?
  especie Json?
  Exams   Exams[]
}

model ReportForExams {
  id             Int         @id @default(autoincrement())
  report         Json?
  textReport     String?
  internalReport String[]
  isOnePart      Boolean?    @default(false)
  isMultiPart    Boolean?    @default(false)
  isReportByText Boolean?    @default(false)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  examsId        Int
  examsForPet    ExamsForPet @relation(fields: [examsId], references: [id])
}

// -------------- EXAMES ----------------- //
